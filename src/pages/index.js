import Head from "next/head";
import Image from "next/image";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useEffect, useState, useRef } from 'react';
import QRCode from 'qrcode';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  const [qrUrl, setQrUrl] = useState('');
  const [message, setMessage] = useState('');
  const wsRef = useRef(null);
  const reconnectRef = useRef(null);

  // establish websocket connection and handle reconnects
  useEffect(() => {
    let mounted = true;

    function connect() {
      const ws = new WebSocket('ws://localhost:8080/ws');
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('ws open');
      };

      ws.onmessage = (e) => {
        const data = typeof e.data === 'string' ? e.data : '';
        if (!mounted) return;
        setMessage(data);
      };

      ws.onerror = (err) => {
        console.error('ws error', err);
      };

      ws.onclose = (ev) => {
        console.log('ws closed', ev.code, ev.reason);
        if (!mounted) return;
        reconnectRef.current = setTimeout(() => connect(), 2000);
      };
    }

    connect();

    return () => {
      mounted = false;
      if (reconnectRef.current) clearTimeout(reconnectRef.current);
      if (wsRef.current) {
        try { wsRef.current.close(); } catch (e) { /* ignore */ }
      }
    };
  }, []);

  // generate QR whenever message changes
  useEffect(() => {
    if (!message) {
      setQrUrl('');
      return;
    }

    let cancelled = false;
    QRCode.toDataURL(message)
      .then((url) => { if (!cancelled) setQrUrl(url); })
      .catch((err) => { console.error('qr gen error', err); });

    return () => { cancelled = true; };
  }, [message]);

  return (
    <>
      <Head>
        <title>VMS-QR</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <h2>Live QR from WebSocket</h2>
          <p>Raw message: <code>{message || '(no message yet)'}</code></p>
          {qrUrl ? (
            <div>
              <Image src={qrUrl} alt="QR Code" width={200} height={200} />
            </div>
          ) : (
            <div style={{ width: 200, height: 200, display: 'flex', alignItems: 'center', justifyContent: 'center', border: '1px solid #eee' }}>
              <small>No QR to show</small>
            </div>
          )}
        </div>
      </main>
      <footer className={styles.footer}>
      </footer>
    </>
  );
}
